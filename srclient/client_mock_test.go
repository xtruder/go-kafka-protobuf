// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package srclient is a generated GoMock package.
package srclient

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetSubjects mocks base method
func (m *MockClient) GetSubjects(ctx context.Context) ([]string, error) {
	ret := m.ctrl.Call(m, "GetSubjects", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubjects indicates an expected call of GetSubjects
func (mr *MockClientMockRecorder) GetSubjects(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubjects", reflect.TypeOf((*MockClient)(nil).GetSubjects), ctx)
}

// GetSubjectVersions mocks base method
func (m *MockClient) GetSubjectVersions(ctx context.Context, subject string) ([]int, error) {
	ret := m.ctrl.Call(m, "GetSubjectVersions", ctx, subject)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubjectVersions indicates an expected call of GetSubjectVersions
func (mr *MockClientMockRecorder) GetSubjectVersions(ctx, subject interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubjectVersions", reflect.TypeOf((*MockClient)(nil).GetSubjectVersions), ctx, subject)
}

// GetSchemaByID mocks base method
func (m *MockClient) GetSchemaByID(ctx context.Context, schemaID int) (*Schema, error) {
	ret := m.ctrl.Call(m, "GetSchemaByID", ctx, schemaID)
	ret0, _ := ret[0].(*Schema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemaByID indicates an expected call of GetSchemaByID
func (mr *MockClientMockRecorder) GetSchemaByID(ctx, schemaID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaByID", reflect.TypeOf((*MockClient)(nil).GetSchemaByID), ctx, schemaID)
}

// GetSchemaByVersion mocks base method
func (m *MockClient) GetSchemaByVersion(ctx context.Context, subject string, version int) (*Schema, error) {
	ret := m.ctrl.Call(m, "GetSchemaByVersion", ctx, subject, version)
	ret0, _ := ret[0].(*Schema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemaByVersion indicates an expected call of GetSchemaByVersion
func (mr *MockClientMockRecorder) GetSchemaByVersion(ctx, subject, version interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaByVersion", reflect.TypeOf((*MockClient)(nil).GetSchemaByVersion), ctx, subject, version)
}

// GetSchemaSubjectVersions mocks base method
func (m *MockClient) GetSchemaSubjectVersions(ctx context.Context, schemaID int) (map[string]int, error) {
	ret := m.ctrl.Call(m, "GetSchemaSubjectVersions", ctx, schemaID)
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemaSubjectVersions indicates an expected call of GetSchemaSubjectVersions
func (mr *MockClientMockRecorder) GetSchemaSubjectVersions(ctx, schemaID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaSubjectVersions", reflect.TypeOf((*MockClient)(nil).GetSchemaSubjectVersions), ctx, schemaID)
}

// GetLatestSchema mocks base method
func (m *MockClient) GetLatestSchema(ctx context.Context, subject string) (*Schema, error) {
	ret := m.ctrl.Call(m, "GetLatestSchema", ctx, subject)
	ret0, _ := ret[0].(*Schema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestSchema indicates an expected call of GetLatestSchema
func (mr *MockClientMockRecorder) GetLatestSchema(ctx, subject interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestSchema", reflect.TypeOf((*MockClient)(nil).GetLatestSchema), ctx, subject)
}

// CreateSchema mocks base method
func (m *MockClient) CreateSchema(ctx context.Context, schema *Schema) (*Schema, error) {
	ret := m.ctrl.Call(m, "CreateSchema", ctx, schema)
	ret0, _ := ret[0].(*Schema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSchema indicates an expected call of CreateSchema
func (mr *MockClientMockRecorder) CreateSchema(ctx, schema interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchema", reflect.TypeOf((*MockClient)(nil).CreateSchema), ctx, schema)
}

// DeleteSubject mocks base method
func (m *MockClient) DeleteSubject(ctx context.Context, subject string, permanent bool) ([]int, error) {
	ret := m.ctrl.Call(m, "DeleteSubject", ctx, subject, permanent)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSubject indicates an expected call of DeleteSubject
func (mr *MockClientMockRecorder) DeleteSubject(ctx, subject, permanent interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubject", reflect.TypeOf((*MockClient)(nil).DeleteSubject), ctx, subject, permanent)
}

// DeleteSchemaByVersion mocks base method
func (m *MockClient) DeleteSchemaByVersion(ctx context.Context, subject string, version int, permanent bool) (int, error) {
	ret := m.ctrl.Call(m, "DeleteSchemaByVersion", ctx, subject, version, permanent)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSchemaByVersion indicates an expected call of DeleteSchemaByVersion
func (mr *MockClientMockRecorder) DeleteSchemaByVersion(ctx, subject, version, permanent interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchemaByVersion", reflect.TypeOf((*MockClient)(nil).DeleteSchemaByVersion), ctx, subject, version, permanent)
}

// IsSchemaCompatible mocks base method
func (m *MockClient) IsSchemaCompatible(ctx context.Context, schema *Schema) (bool, error) {
	ret := m.ctrl.Call(m, "IsSchemaCompatible", ctx, schema)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSchemaCompatible indicates an expected call of IsSchemaCompatible
func (mr *MockClientMockRecorder) IsSchemaCompatible(ctx, schema interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSchemaCompatible", reflect.TypeOf((*MockClient)(nil).IsSchemaCompatible), ctx, schema)
}

// Mockoption is a mock of option interface
type Mockoption struct {
	ctrl     *gomock.Controller
	recorder *MockoptionMockRecorder
}

// MockoptionMockRecorder is the mock recorder for Mockoption
type MockoptionMockRecorder struct {
	mock *Mockoption
}

// NewMockoption creates a new mock instance
func NewMockoption(ctrl *gomock.Controller) *Mockoption {
	mock := &Mockoption{ctrl: ctrl}
	mock.recorder = &MockoptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockoption) EXPECT() *MockoptionMockRecorder {
	return m.recorder
}

// OptionType mocks base method
func (m *Mockoption) OptionType() {
	m.ctrl.Call(m, "OptionType")
}

// OptionType indicates an expected call of OptionType
func (mr *MockoptionMockRecorder) OptionType() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OptionType", reflect.TypeOf((*Mockoption)(nil).OptionType))
}
